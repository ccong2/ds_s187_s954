{
  "hash": "4df3a4dd1eb8070ac3ae174fbf42da39",
  "result": {
    "markdown": "---\ntitle: \"Describe neighborhood dynamics with ![](../img/Rlogo.png){width=60px}\"\nsubtitle: <span style=\"color:#2C3E50\">11.S954 Applied Data Science for Cities</span>\ndate: \"Last Updated 2023-11-22\"\nformat: html\neditor: visual\n---\n\n\n# Overview\n\nGeospatial data analysis figures prominently in cities and urban analytics. In this lab, we will introduce essential tools and processes to facilitate spatial analysis, along with demonstrating how to obtain and integrate data from open data sources.\n\nTo put things into context, we are going to describe walkable environment in Boston neighborhoods. Walkability is regarded as whether characteristics of the built environment may or may not support residents to walk for either leisure or access destinations (Leslie et al., 2007). Some studies have further pinpointed several variables within a framework of three D's supporting walkability: Density, Diversity, and Design ([Cervero and Kockelman, 1997](https://web.mit.edu/11.s946/www/readings/Cervero_1997.pdf), Ewing et al., 2008), and later, five D's that further include Destination accessibility and Diversity ([Ewing & Cervero, 2010](https://www.tandfonline.com/doi/abs/10.1080/01944361003766766)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(osmdata)\nlibrary(scales)\n```\n:::\n\n\n# Components included in the index\n\nSuppose an advocacy group in the City of Boston wants to assess the walkability of neighborhoods in their built environment, and identifies the following indicators to describe the environment:\n\n-   Population density,\n-   Business activities---e.g. retail, groceries, food---that are available within an area,\n-   Sidewalk coverage (share of ground area used as sidewalks)\n\nThese indicators can be operationalized as follows:\n\n| Indicator           | Measure                                                                  | Data Source    |\n|---------------------|--------------------------------------------------------------------------|----------------|\n| Population density  | Population per sq.mi.                                                    | Analyze Boston |\n| Business activities | Number of selected POIs in the neighborhood per 1000 residents           | OSM            |\n| Sidewalk coverage   | The total length (ft) of sidewalk per area (sq.ft.) in each neighborhood | OSM            |\n\n# Calculate areas and lengths\n\nLet's gather, process data, and calculate these indicators one by one. First, we will need neighborhood boundaries, available on the Boston open data portal [Analyze Boston](https://data.boston.gov/). Let's navigate to the [Boston neighborhood boundaries approximated by 2020 census block groups](https://data.boston.gov/dataset/boston-neighborhood-boundaries-approximated-by-2020-census-block-groups) page. Find the shapefile format and click download to bring the zipped file to your data folder.\n\nAlthough we can directly click to unzip it, let's try to do it with R commands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunzip(zipfile = \"data/Boston_Neighborhood_Boundaries_approximated_by_2020_Census_Block_Groups.zip\", exdir = \"data\", overwrite = TRUE)\n\nfile.remove(\"data/Boston_Neighborhood_Boundaries_approximated_by_2020_Census_Block_Groups.zip\")\n```\n:::\n\n\nWhen we have the shapefile, we will use `st_read` in the `sf` package to read it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneighborhood <-\n  st_read(\"data/Boston_Neighborhood_Boundaries_approximated_by_2020_Census_Block_Groups.shp\") |> \n  select(nbh_name = blockgr202, population = tot_pop_al)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nNotice that this shapefile has a population by neighborhood that is ready to use, which is very nice, otherwise we will have to aggregate the census population ourselves.\n\nWhen we work with shapefiles from different sources, the first step is to check the *Coordinate Reference System (CRS)*. Places can appear differently in shape on maps when different CRSs are used due to the inherent distortions introduced during the process of projection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(neighborhood)$epsg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2249\n```\n:::\n:::\n\n\nThis informs us that the neighborhood shapefile is stored in a State Plane coordinate system Massachusetts Mainland, which has an EPSG code 2249. State Plane projections are 1) \"projected\", meaning that x and y coordinates are in linear measurements, as opposed to degrees; and 2) are regional datums designed to provide accurate positioning data for North America specifically, as opposed to WGS84, which is a global datum. EPSG code is a standardized shorthand for referencing each CRS. Feel free to navigate to [epsg.io](https://epsg.io/) and look around.\n\nWe can calculate polygon areas using `st_area()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneighborhood |> \n  mutate(nbh_area = st_area(geometry))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 24 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 739715.8 ymin: 2908294 xmax: 812981.4 ymax: 2970217\nProjected CRS: NAD83 / Massachusetts Mainland (ftUS)\nFirst 10 features:\n      nbh_name population                       geometry\n1      Allston      28621 MULTIPOLYGON (((758525.8 29...\n2     Back Bay      19588 MULTIPOLYGON (((771539.2 29...\n3  Beacon Hill       9336 MULTIPOLYGON (((774297.4 29...\n4     Brighton      48330 MULTIPOLYGON (((754177.9 29...\n5  Charlestown      19120 MULTIPOLYGON (((773132.5 29...\n6    Chinatown       7143 MULTIPOLYGON (((775639 2953...\n7   Dorchester     122191 MULTIPOLYGON (((775867.2 29...\n8     Downtown      13451 MULTIPOLYGON (((773867.7 29...\n9  East Boston      43066 MULTIPOLYGON (((790148.5 29...\n10      Fenway      37733 MULTIPOLYGON (((756955.2 29...\n                       nbh_area\n1   41547595 [US_survey_foot^2]\n2   15387245 [US_survey_foot^2]\n3    7891524 [US_survey_foot^2]\n4   76581557 [US_survey_foot^2]\n5   51270214 [US_survey_foot^2]\n6    3436019 [US_survey_foot^2]\n7  219303798 [US_survey_foot^2]\n8   21590100 [US_survey_foot^2]\n9  181088272 [US_survey_foot^2]\n10  42813573 [US_survey_foot^2]\n```\n:::\n:::\n\n\nThe new `nbh_area` column returns a unit object in square feet, which is consistent with the dataset's projection. Although we can do basic math operations on unit objects, managing the units incurs memory overhead. Transforming them to simple numeric values is advisable if this information is not necessary to be carried along for the entire analysis.\n\nUsing the population information, we can proceed to compute the population per square mile and add this column to the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneighborhood <- neighborhood |> \n  mutate(nbh_area = as.numeric(st_area(geometry))) |> \n  mutate(pop_density = population/(nbh_area/27878400)) \n```\n:::\n\n\n## Density of sidewalks\n\nFrom the front page of Analyze Boston, search for \"sidewalk\", you will find the [Sidewalk Centerline](https://data.boston.gov/dataset/sidewalk-centerline) shapefile. Download it to your data folder, unzip it and read it in R. What CRS is this shapefile using?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsidewalk <- st_read(\"data/Sidewalk_Centerline.shp\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nIf we intersect the sidewalk and neighborhood shapefiles, we should be able to calculate the total length of sidewalk segments in each neighborhood. Similar to `st_area`, `st_length` is another geometry measurement function and calculates segment length.\n\nIn the following code, we are going to:\n\n1.  intersect the sidewalk and neighborhood spatial objects, i.e. break up line segments at neighborhood boundaries;\n2.  calculate the lengths of sidewalk segments after the intersection;\n3.  convert the units to numeric values;\n4.  group the line segments by neighborhood, summing up the sidewalk lengths within each neighborhood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsidewalk_data <- \n  st_intersection(sidewalk, neighborhood) |> \n  mutate(length = as.numeric(st_length(geometry))) |> \n  group_by(nbh_name) |> \n  summarise(sidewalk_length = sum(length)) \n```\n:::\n\n\nTo calculate sidewalk coverage we need to join `sidewalk_length` with `neighborhood`, using the shared attribute `nbh_name` in these two datasets. Recall that operations on attributes do not remove their geometry - but we can explicitly drop it using `st_drop_geometry()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsidewalk_data <-  sidewalk_data |> st_drop_geometry() |> \n  left_join(neighborhood, by = \"nbh_name\") \n```\n:::\n\n\nThen we'll calculate sidewalk density using another pipeline:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsidewalk_data <- \n  sidewalk_data |> \n  mutate(sidewalk_coverage = sidewalk_length/nbh_area) |> \n  select(nbh_name, sidewalk_coverage)\n```\n:::\n\n\nAt this point, you can remove some datasets that you don't anticipate using again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(sidewalk)\n```\n:::\n\n\n# Obtain and process OSM data\n\nFor the other nutrition-related variables, we are going to download points of interest (POI) from OpenStreetMap (OSM). By allowing anyone to contribute, OSM enables the real-time evolution of its database and offers convenient options for downloading data through its free [Overpass API](https://overpass-turbo.eu/#). In this lab, we will use the [`osmdata` R package](https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html), which simplifies download queries without much understanding of the overpass query syntax.\n\nIn order to obtain data from OSM, you will need to specify:\n\n-   a bounding box\n-   key-value pairs\n\n### The bounding box\n\nA bounding box is like a window of where you want to clip a piece of map. It can be defined by manually specifying two longitude-latitude pairs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (lon, lat) of Lower left and Upper right corners \nbbox = c(-71.188, 42.238, -70.924, 42.393)\n```\n:::\n\n\nIn most cases, they can be directly identified by character strings.\n\n`bbox = 'Boston, MA, USA'`\n\nHowever, recently there seem to be some issues with `bbox` direct address query. I implemented [a workaround here](https://stackoverflow.com/questions/76835293/error-when-querying-osmdata-package-http-405-method-not-allowed) so that we can still obtain a bounding box by entering a place name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This may need you to `install.packages(\"nominatimlite\")`\nbbox <- sf::st_bbox(nominatimlite::geo_lite_sf(\n  address = \"Boston, MA, USA\", \n  points_only = FALSE))   \n```\n:::\n\n\n### The key-value pairs\n\nAn overpass query `opq` starts with engaging with the bounding box like this:\n\n`q <- opq(bbox)`\n\nFollowing the initial `opq(bbox)` call, we will build queries by adding one or more features, which are specified in terms of *key-value pairs*.\n\nHere is [a complete list of key-value pairs on OSM](https://wiki.openstreetmap.org/wiki/Map_Features), in which values can be understood as specific types of places, and keys are their categories. These are the keywords you can use when downloading OSM data.\n\nFor example, supermarket stores are categorized in OSM under `key=shop`, and `value=supermarket`. So a query of all supermarkets within the boundary box of Boston can be constructed as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket <- opq(bbox)|>   \n  add_osm_feature(key = \"shop\", value = \"supermarket\") |>  \n  osmdata_sf() \n```\n:::\n\n\nThe retrieved OSM object is a huge list that includes numerous attributes; What we need is an `sf` object named `osm_polygons` nested in this list. Let's extract `osm_polygons`, then select only the name (and the attached geometry) of this object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket <- supermarket$osm_polygons |> select(name)\n```\n:::\n\n\nWe can make a quick plot, zoom in, and check the result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet() |> \n  addTiles() |> \n  addPolygons(data = supermarket)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-af94912ed4b9ef2c152d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-af94912ed4b9ef2c152d\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-71.1206451,-71.12080330000001,-71.1207814,-71.12042099999999,-71.1203775,-71.12035419999999,-71.12026090000001,-71.1202845,-71.1202744,-71.1202567,-71.1201978,-71.1205284,-71.1205432,-71.1206451],\"lat\":[42.3416918,42.3419744,42.3420066,42.3421096,42.3420941,42.3421008,42.3419214,42.3419146,42.3418952,42.3419003,42.341787,42.3416925,42.341721,42.3416918]}]],[[{\"lng\":[-70.9910817,-70.9914022,-70.9912806,-70.9912228,-70.99084449999999,-70.9910817],\"lat\":[42.2414608,42.2415259,42.2420129,42.2421748,42.2420982,42.2414608]}]],[[{\"lng\":[-71.1130496,-71.113135,-71.113118,-71.1133699,-71.1132313,-71.1131345,-71.1131511,-71.1129866,-71.11298119999999,-71.112905,-71.1130496],\"lat\":[42.3735754,42.3735947,42.3736358,42.3736929,42.3740293,42.3740075,42.3739673,42.37393,42.3739431,42.3739258,42.3735754]}]],[[{\"lng\":[-70.996404,-70.99653309999999,-70.99659,-70.99663959999999,-70.9965807,-70.99630089999999,-70.99612260000001,-70.996404],\"lat\":[42.2536644,42.2537691,42.2537303,42.2537705,42.2538106,42.2540007,42.253856,42.2536644]}]],[[{\"lng\":[-71.0142105,-71.0141265,-71.014572,-71.01467270000001,-71.014602,-71.0146931,-71.01452740000001,-71.0144363,-71.0142105],\"lat\":[42.2661229,42.2659614,42.2657369,42.2658539,42.2658876,42.2660078,42.2661015,42.2659876,42.2661229]}]],[[{\"lng\":[-71.14980300000001,-71.1498189,-71.14931199999999,-71.148988,-71.14900179999999,-71.1487947,-71.1487478,-71.14880530000001,-71.1488003,-71.1487434,-71.1487047,-71.1486912,-71.148786,-71.1493542,-71.1493577,-71.1494304,-71.1494296,-71.14980300000001],\"lat\":[42.3748429,42.3748644,42.3758032,42.3756874,42.3757856,42.3758015,42.3754678,42.3754633,42.3754272,42.3754316,42.3751489,42.3750508,42.3750417,42.3749873,42.3749954,42.3749909,42.3749663,42.3748429]}]],[[{\"lng\":[-71.1111121,-71.1111891,-71.1109768,-71.110761,-71.110721,-71.110574,-71.11060999999999,-71.1107028,-71.11068400000001,-71.1111121],\"lat\":[42.3213306,42.3216368,42.3216662,42.3216961,42.3215371,42.3214805,42.3214291,42.3214647,42.32139,42.3213306]}]],[[{\"lng\":[-71.11415390000001,-71.1142009,-71.1143359,-71.1144658,-71.1143939,-71.1144101,-71.11390419999999,-71.1136381,-71.11346330000001,-71.1134443,-71.1138559,-71.11415390000001],\"lat\":[42.3607006,42.3607849,42.3607434,42.3609756,42.361029,42.3610579,42.3612135,42.3612954,42.3609829,42.3608278,42.3607923,42.3607006]}]],[[{\"lng\":[-71.04764280000001,-71.0473523,-71.0470413,-71.04733299999999,-71.04764280000001],\"lat\":[42.3516854,42.3520505,42.3519163,42.3515453,42.3516854]}]],[[{\"lng\":[-71.04081619999999,-71.0408171,-71.0408312,-71.0408971,-71.0409002,-71.0408348,-71.0408426,-71.0409679,-71.04090239999999,-71.04099239999999,-71.0409645,-71.0399707,-71.0399256,-71.0399245,-71.04039349999999,-71.0406103,-71.04081619999999],\"lat\":[42.3763308,42.3763413,42.3764997,42.376498,42.3765355,42.3765379,42.3766914,42.3767361,42.3768332,42.3768676,42.3769019,42.3769307,42.3763736,42.3763594,42.3763428,42.3763366,42.3763308]}]],[[{\"lng\":[-71.11430900000001,-71.11444830000001,-71.11409829999999,-71.11395899999999,-71.11430900000001],\"lat\":[42.3580643,42.358372,42.3584585,42.3581508,42.3580643]}]],[[{\"lng\":[-71.1232432,-71.1236256,-71.123617,-71.12404669999999,-71.12388060000001,-71.12306839999999,-71.1232432],\"lat\":[42.3522475,42.3522927,42.3523328,42.3523836,42.3531577,42.3530617,42.3522475]}]],[[{\"lng\":[-71.12014979999999,-71.1205587,-71.1205531,-71.1207091,-71.1208898,-71.1208676,-71.1208292,-71.1207991,-71.12078320000001,-71.1208228,-71.120801,-71.1199909,-71.1200135,-71.11987790000001,-71.119917,-71.1200403,-71.1201377,-71.12014979999999],\"lat\":[42.337892,42.3379429,42.3380102,42.3380205,42.3380324,42.3381346,42.3383127,42.3384551,42.3385259,42.3385331,42.338599,42.3384503,42.3383824,42.3383575,42.3381791,42.3379778,42.3379847,42.337892]}]],[[{\"lng\":[-71.04077580000001,-71.04105029999999,-71.04091680000001,-71.0411216,-71.0410959,-71.0410296,-71.0408559,-71.0406796,-71.04072480000001,-71.0405481,-71.0406471,-71.04069560000001,-71.0406629,-71.04077580000001],\"lat\":[42.2594729,42.2595465,42.2598215,42.2598764,42.2599293,42.2599116,42.2602694,42.2602859,42.2601925,42.2601451,42.2598137,42.2597142,42.2597054,42.2594729]}]],[[{\"lng\":[-71.0511205,-71.0513718,-71.0502637,-71.05001439999999,-71.05055,-71.0505175,-71.05075600000001,-71.0507866,-71.0511205],\"lat\":[42.3180039,42.3184319,42.3187903,42.3183655,42.3181924,42.318137,42.3180598,42.3181119,42.3180039]}]],[[{\"lng\":[-71.15696699999999,-71.15718529999999,-71.1572231,-71.1570048,-71.15696699999999],\"lat\":[42.2606838,42.2606568,42.260824,42.2608511,42.2606838]}]],[[{\"lng\":[-71.1390981,-71.1391234,-71.13905629999999,-71.1390688,-71.13924900000001,-71.13941,-71.1392432,-71.13925690000001,-71.1391125,-71.1389176,-71.1389739,-71.13895650000001,-71.1390981],\"lat\":[42.3372718,42.3373452,42.3373579,42.3373941,42.3373598,42.3378265,42.3378581,42.337898,42.3379254,42.3373603,42.3373496,42.3372988,42.3372718]}]],[[{\"lng\":[-71.10131629999999,-71.1015537,-71.10151860000001,-71.1015615,-71.10159899999999,-71.1020523,-71.1020039,-71.1021647,-71.1021202,-71.1020898,-71.10200810000001,-71.10180819999999,-71.10164399999999,-71.1012453,-71.101027,-71.1011883,-71.10131629999999],\"lat\":[42.3803572,42.3804382,42.3804903,42.3805057,42.3804527,42.3806036,42.3806952,42.3807564,42.3808311,42.3808174,42.3807957,42.3811252,42.381068,42.3809299,42.3808541,42.3805925,42.3803572]}]],[[{\"lng\":[-71.11167759999999,-71.11179060000001,-71.1122501,-71.11200890000001,-71.1120583,-71.1120887,-71.11211849999999,-71.1119953,-71.11132000000001,-71.11167759999999],\"lat\":[42.3832851,42.3833567,42.3836452,42.3838484,42.38388,42.3838995,42.3839185,42.3840243,42.3835921,42.3832851]}]],[[{\"lng\":[-71.0810322,-71.08153160000001,-71.08106720000001,-71.0804607,-71.08079619999999,-71.0809031,-71.0810322],\"lat\":[42.3087832,42.3090428,42.309535,42.3092196,42.3088642,42.3089199,42.3087832]}]],[[{\"lng\":[-71.1585881,-71.15846809999999,-71.15846500000001,-71.15861630000001,-71.1586697,-71.1586724,-71.1586731,-71.1586698,-71.1586654,-71.15864670000001,-71.1585881],\"lat\":[42.3706399,42.370541,42.3705386,42.3704474,42.3705382,42.3705395,42.3705655,42.3705711,42.3705867,42.3706067,42.3706399]}]],[[{\"lng\":[-71.1021428,-71.10219189999999,-71.1022395,-71.10222330000001,-71.10265699999999,-71.1026402,-71.1027624,-71.1026834,-71.10203079999999,-71.1021428],\"lat\":[42.3678816,42.3679006,42.3679191,42.367942,42.3681101,42.368134,42.3681814,42.3682934,42.3680404,42.3678816]}]],[[{\"lng\":[-71.1373296,-71.1374175,-71.1373734,-71.1381336,-71.1378758,-71.13779100000001,-71.137488,-71.1370483,-71.1370539,-71.13706879999999,-71.137019,-71.1372209,-71.1372729,-71.1373296],\"lat\":[42.3604478,42.3604693,42.3605685,42.3607546,42.3613823,42.3613615,42.3612874,42.3611798,42.3611671,42.3611335,42.3610162,42.3605624,42.3605752,42.3604478]}]],[[{\"lng\":[-71.08561880000001,-71.0861482,-71.08619469999999,-71.0862611,-71.0863245,-71.0863811,-71.0853923,-71.0852381,-71.0853315,-71.0849343,-71.0851553,-71.085081,-71.08561880000001],\"lat\":[42.3909271,42.3912216,42.3911758,42.3912139,42.3911504,42.391182,42.3921394,42.3920567,42.3919605,42.3917374,42.3915212,42.3914786,42.3909271]}]],[[{\"lng\":[-71.0268657,-71.0271917,-71.02729739999999,-71.0274799,-71.0272375,-71.0266026,-71.0264019,-71.0263641,-71.0262992,-71.02584210000001,-71.02588040000001,-71.0259259,-71.0259535,-71.0260002,-71.0260135,-71.0260665,-71.02639310000001,-71.02638930000001,-71.0264396,-71.0264375,-71.0264671,-71.0265132,-71.02661310000001,-71.02657290000001,-71.026681,-71.0266247,-71.0266694,-71.0267284,-71.0268657],\"lat\":[42.2705525,42.2708607,42.2707951,42.2709723,42.2711274,42.2714976,42.2716147,42.271579,42.2716168,42.2711845,42.2711119,42.2711252,42.2710725,42.2710861,42.2710609,42.2710762,42.2708857,42.2708145,42.270813,42.2707729,42.2707721,42.2708157,42.2707574,42.2707194,42.2706563,42.270603,42.2705769,42.2706326,42.2705525]}]],[[{\"lng\":[-71.1637903,-71.16397499999999,-71.16333400000001,-71.163321,-71.16256869999999,-71.16254429999999,-71.1627677,-71.1626363,-71.1627483,-71.162738,-71.16293880000001,-71.16293140000001,-71.16300990000001,-71.16300630000001,-71.1631084,-71.16311039999999,-71.1634538,-71.1634502,-71.1635517,-71.16356740000001,-71.16360090000001,-71.1636614,-71.1636529,-71.1637903],\"lat\":[42.2783711,42.2788291,42.2789717,42.2789396,42.2791068,42.2790462,42.2789966,42.2786705,42.2786457,42.27862,42.2785754,42.278557,42.2785395,42.2785308,42.2785081,42.278513,42.2784366,42.2784277,42.2784051,42.2784438,42.2784361,42.2784226,42.2784017,42.2783711]}]],[[{\"lng\":[-71.07003,-71.0700605,-71.07029850000001,-71.0696725,-71.0696401,-71.069565,-71.0695091,-71.06943510000001,-71.0694074,-71.0692569,-71.0691044,-71.07003],\"lat\":[42.2715482,42.2716019,42.2720202,42.2722151,42.2721581,42.2721815,42.2720832,42.2721063,42.2720577,42.2721045,42.2718364,42.2715482]}]],[[{\"lng\":[-71.05163810000001,-71.0516913,-71.0519031,-71.0521107,-71.0518361,-71.05163810000001],\"lat\":[42.3398842,42.3398376,42.3396523,42.3397803,42.3400063,42.3398842]}]],[[{\"lng\":[-71.1395996,-71.14083890000001,-71.1408294,-71.14077589999999,-71.1407172,-71.14063,-71.1404567,-71.1404423,-71.14038859999999,-71.1403893,-71.14026560000001,-71.140275,-71.1401747,-71.14016599999999,-71.14011910000001,-71.140108,-71.14001880000001,-71.139999,-71.13971770000001,-71.139707,-71.1396621,-71.1396467,-71.1395766,-71.1395598,-71.1394899,-71.1394624,-71.1395996],\"lat\":[42.3563295,42.3564997,42.3565381,42.3567546,42.3567465,42.3570792,42.3570554,42.3571102,42.3571099,42.357045,42.3570284,42.3569885,42.3569737,42.3570138,42.3570202,42.356989,42.3570046,42.3569489,42.3569087,42.3569452,42.3569548,42.3569249,42.3569432,42.3569127,42.3569338,42.3568755,42.3563295]}]],[[{\"lng\":[-71.1034535,-71.10345479999999,-71.1034963,-71.1035102,-71.1031811,-71.10318220000001,-71.1030291,-71.1030312,-71.1029369,-71.10293609999999,-71.1026652,-71.1026502,-71.1026164,-71.1026153,-71.10282979999999,-71.1028283,-71.1034535],\"lat\":[42.3237948,42.3238375,42.3238369,42.3242993,42.3243048,42.3243412,42.3243438,42.324414,42.3244156,42.3243864,42.3243909,42.3238948,42.3238953,42.3238587,42.3238551,42.3238051,42.3237948]}]],[[{\"lng\":[-71.1257461,-71.12609430000001,-71.1260571,-71.12611389999999,-71.1261214,-71.1262997,-71.12631690000001,-71.1263709,-71.1263172,-71.1266816,-71.1267082,-71.126577,-71.1265118,-71.12649589999999,-71.1262966,-71.12628890000001,-71.1262175,-71.1255256,-71.12553269999999,-71.12543669999999,-71.1256564,-71.12571749999999,-71.1257461],\"lat\":[42.251415,42.2515076,42.2515848,42.2515998,42.2515842,42.2516316,42.251596,42.2516103,42.2517213,42.2518184,42.2519063,42.2521783,42.252161,42.2521943,42.2521412,42.2521573,42.2521383,42.2519542,42.2519394,42.2519139,42.2514581,42.2514745,42.251415]}]],[[{\"lng\":[-71.1588921,-71.15884699999999,-71.158919,-71.1589311,-71.15907439999999,-71.1591196,-71.15911269999999,-71.1590875,-71.159059,-71.1589644,-71.1588921],\"lat\":[42.3703611,42.3703037,42.3702745,42.3702894,42.3702309,42.370233,42.3702752,42.3703904,42.3704205,42.3704607,42.3703611]}]],[[{\"lng\":[-71.10085650000001,-71.1009542,-71.1009798,-71.1010035,-71.10102500000001,-71.1009093,-71.100903,-71.1008071,-71.10056760000001,-71.1001212,-71.100064,-71.0999838,-71.0999041,-71.10085650000001],\"lat\":[42.343254,42.3434585,42.3434518,42.3435013,42.3435461,42.3435766,42.3435638,42.3435887,42.3436529,42.3437696,42.3436499,42.343671,42.3435046,42.343254]}]],[[{\"lng\":[-71.0343709,-71.034395,-71.0344431,-71.0343416,-71.03428940000001,-71.0343709],\"lat\":[42.3763785,42.3764169,42.37649,42.3765263,42.376447,42.3763785]}]],[[{\"lng\":[-71.10277290000001,-71.1027649,-71.10261629999999,-71.10229030000001,-71.10210979999999,-71.1018924,-71.1021283,-71.1021832,-71.1023572,-71.1026105,-71.10277290000001],\"lat\":[42.3650222,42.3650287,42.3651639,42.3654669,42.3656396,42.3655122,42.3652926,42.3653248,42.3651627,42.3649269,42.3650222]}]],[[{\"lng\":[-70.9240063,-70.9239812,-70.9240502,-70.92401030000001,-70.9239462,-70.9239285,-70.92322679999999,-70.9233061,-70.9240063],\"lat\":[42.2467977,42.2470994,42.2471026,42.2475818,42.2475789,42.2477432,42.24772,42.2467658,42.2467977]}]],[[{\"lng\":[-71.0422846,-71.04227419999999,-71.0430872,-71.0430772,-71.0431426,-71.0431353,-71.04319409999999,-71.0431482,-71.0432485,-71.0431968,-71.0429154,-71.0428749,-71.0415993,-71.04163130000001,-71.0414183,-71.04148600000001,-71.0414574,-71.04149820000001,-71.0418145,-71.0420611,-71.0422806,-71.0422846],\"lat\":[42.396053,42.3961127,42.3961892,42.3962471,42.3962533,42.3962952,42.3963008,42.3965661,42.3965756,42.3968747,42.3968487,42.3969687,42.3968482,42.3966632,42.3966431,42.3962518,42.3962505,42.3960065,42.3960046,42.3960164,42.396033,42.396053]}]],[[{\"lng\":[-70.9209986,-70.9209962,-70.92025580000001,-70.92025630000001,-70.9201712,-70.92017180000001,-70.92025649999999,-70.9202578,-70.9209986],\"lat\":[42.2500746,42.2497342,42.2497371,42.2498005,42.2498009,42.249884,42.2498837,42.2500774,42.2500746]}]],[[{\"lng\":[-71.1081372,-71.10737520000001,-71.1070969,-71.1072545,-71.10718489999999,-71.10769759999999,-71.10771509999999,-71.10780680000001,-71.1081372],\"lat\":[42.2620061,42.2624104,42.2621232,42.2620396,42.2619678,42.2616957,42.2617138,42.2616651,42.2620061]}]],[[{\"lng\":[-70.81987100000001,-70.8198257,-70.820286,-70.82091749999999,-70.8208444,-70.8208735,-70.82082490000001,-70.8208113,-70.8205935,-70.820607,-70.8205595,-70.82052950000001,-70.82046459999999,-70.8198794,-70.81987100000001],\"lat\":[42.2336619,42.233643,42.2330336,42.2332969,42.2333938,42.2334059,42.2334703,42.2334646,42.233753,42.2337586,42.2338214,42.2338089,42.2338948,42.2336508,42.2336619]}]],[[{\"lng\":[-71.11462040000001,-71.11457470000001,-71.11462299999999,-71.1146498,-71.1142546,-71.114144,-71.1140195,-71.11392650000001,-71.1138346,-71.1139277,-71.1137617,-71.11432139999999,-71.11462040000001],\"lat\":[42.275655,42.2756352,42.2755697,42.2755161,42.2753468,42.2752993,42.2754685,42.275431,42.275556,42.2755934,42.2758191,42.2760524,42.275655]}]],[[{\"lng\":[-71.1755498,-71.1756113,-71.1755593,-71.1748982,-71.1749097,-71.1747974,-71.17481100000001,-71.17458550000001,-71.1747943,-71.1749282,-71.1749169,-71.1756231,-71.17563440000001,-71.17573160000001,-71.1755498],\"lat\":[42.3186232,42.3186,42.3185246,42.3187738,42.3187904,42.3188327,42.3188524,42.3189374,42.3192402,42.3191897,42.3191734,42.3189072,42.3189235,42.3188869,42.3186232]}]],[[{\"lng\":[-70.9241105,-70.9237584,-70.9236033,-70.9239553,-70.9241105],\"lat\":[42.2491604,42.2492538,42.2489336,42.2488401,42.2491604]}]],[[{\"lng\":[-71.1255345,-71.1254473,-71.12539580000001,-71.1250314,-71.1251702,-71.1255345],\"lat\":[42.35274,42.3531282,42.3533578,42.3533131,42.3526953,42.35274]}]],[[{\"lng\":[-71.19130680000001,-71.1906673,-71.19055779999999,-71.1906362,-71.1906046,-71.19070240000001,-71.1907001,-71.1907598,-71.19093700000001,-71.1909338,-71.1909931,-71.1910917,-71.1911233,-71.191185,-71.19170699999999,-71.19167640000001,-71.19164739999999,-71.19130680000001],\"lat\":[42.3888017,42.3887731,42.3887028,42.3886362,42.3886159,42.3885328,42.3884866,42.388484,42.3883334,42.388288,42.3882857,42.3882019,42.3882222,42.3881698,42.3885049,42.3885309,42.3885122,42.3888017]}]],[[{\"lng\":[-71.0822884,-71.0819171,-71.0824892,-71.08272770000001,-71.0826285,-71.0827235,-71.0822884],\"lat\":[42.3329146,42.3332728,42.3335951,42.3333386,42.333264,42.3331765,42.3329146]}]],[[{\"lng\":[-71.0495519,-71.0490932,-71.0489384,-71.04895070000001,-71.0489705,-71.04898230000001,-71.04850570000001,-71.04857370000001,-71.04877689999999,-71.0488816,-71.049335,-71.0493522,-71.04936910000001,-71.04937390000001,-71.0495519],\"lat\":[42.2930245,42.2922288,42.2922776,42.292299,42.2923334,42.2923538,42.2925042,42.2926221,42.2929745,42.2931561,42.293013,42.2930429,42.2930723,42.2930806,42.2930245]}]],[[{\"lng\":[-70.99161770000001,-70.9916035,-70.991514,-70.9914275,-70.99178019999999,-70.9917708,-70.9919436,-70.9919537,-70.9920967,-70.9925669,-70.9928901,-70.99308190000001,-70.99161770000001],\"lat\":[42.2399247,42.2399636,42.2402122,42.2404552,42.2405268,42.2405548,42.2405886,42.2405618,42.2405908,42.2406844,42.2407476,42.2402161,42.2399247]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[42.2324694,42.3969687],\"lng\":[-71.19170699999999,-70.8198257]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nMost of the supermarket locations are there. To prepare for our next step - joining them with our neighborhood dataset, we will do two additional things:\n\n1.  find the centroids for these supermarket polygons;\n2.  transform its CRS to be consistent with our neighborhood data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket <- \n  supermarket |> \n  st_centroid(geometry) |> \n  st_transform(2249)\n```\n:::\n\n\n### Write a function\n\nTo streamline this \"download - extract - transform\" process, we can create a function to extract the specific elements required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I name the function \"get_osm\". \n# The inputs are place name and the key-value pair\n# The output is a spatial point sf object that stores the centroid of POIs.\nget_osm <- function(place, key, value){\n  bbox <- sf::st_bbox(nominatimlite::geo_lite_sf(\n    address = place,\n    points_only = FALSE))\n  \n  temp <- opq(bbox) |>\n    add_osm_feature(key = key, value = value) |>\n    osmdata_sf()\n  \n  df <- temp$osm_polygons |> \n    select(name) |>\n    st_centroid(geometry) |> \n    st_transform(2249)\n  return(df)\n}\n```\n:::\n\n\nLet's use our function to download more POIs that could describe business activities. Note that below is not an exhaustive list, there may be further relevant points to consider.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrestaurant <- get_osm(\"Boston, MA, USA\", \"amenity\", \"restaurant\")\nfastfood <- get_osm(\"Boston, MA, USA\", \"amenity\", \"fast_food\")\nretail <- get_osm(\"Boston, MA, USA\", \"building\", \"retail\")\n```\n:::\n\n\n## Calculate the number of POIs by neighborhood\n\nOnce the three OSM variables are generated, we will count the number of points within each neighborhood. In the following code, `st_intersects` returns a list of 24 (the number of neighborhoods), in which each element contains IDs of the points falling within this polygon. We then apply `lengths()` to the elements of `st_intersects` to count the number of IDs. (`lengths` is a base R function, it's not calculating spatial lengths, but getting the length of elements of a list).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The `bind_cols` brings multiple vectors together to make a data frame\nosm_data <- bind_cols(neighborhood$nbh_name,\n  lengths(st_intersects(neighborhood, restaurant)),\n  lengths(st_intersects(neighborhood, fastfood)),\n  lengths(st_intersects(neighborhood, retail)),\n  lengths(st_intersects(neighborhood, supermarket))\n)\n\ncolnames(osm_data) <- c(\"nbh_name\", \"restaurant\", \"fastfood\", \"retail\", \"supermarket\")\n```\n:::\n\n\nThen we will sum them up to have the total number of business-related POIs in each neighborhood, then factor in the population size to normalize the raw count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nosm_data <- osm_data |> \n  left_join(neighborhood, by = \"nbh_name\") |> \n  mutate(poi_density = ifelse(population>0, \n                              (restaurant+fastfood+retail+supermarket)/(population/1000), \n                              NA)) |> \n  select(nbh_name, poi_density)\n```\n:::\n\n\n## Assemble results\n\nNow we will put the three parts of our result (population density, sidewalk coverage, and POI data) in one place. The three datasets we have created share the common attribute `nbh_name`. We can perform `left_join()` on two datasets at a time, but an alternative strategy is to use the `purrr` package's `reduce()` function to combine multiple datasets at one time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- list(neighborhood, sidewalk_data, osm_data) |> \n  reduce(left_join, by = \"nbh_name\")\n```\n:::\n\n\nWe have finally compiled the necessary dataset that incorporates all the indicators we have identified! Now let's remove intermediary variables in the working environment, keeping only the `data` and prepare to create the index.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=setdiff(ls(), \"data\"))\ndata <- data |> select(-c(population, nbh_area))\n```\n:::\n\n\n# Create a composite index\n\nThere are many different methods to combine variables. We are going to create a relatively simple additive index by adding up our three indicators with equal weights. But before that, we need to standardize our variables to make sure they are at a comparable scale.\n\n## Standardize indicators\n\nSince our indicators end up having very different scales, we can't interpret anything about the magnitude by comparing these values to each other. In many statistical analyses, such as multivariate linear regression, standardizing your data is usually an essential first step to prevent certain variables from dominating the analysis due to their larger numerical values.\n\nZ-score standardization converts data from various distributions into a common *unit* of measurement, which is the number of standard deviations from the mean. This conversion enables data points, regardless of their original spread, to be expressed in the same way.\n\nA z-score can be calculated by subtracting from a given observation the mean of all observations and then dividing by the standard deviation of all observations. R has us covered here - the `scale` function does exactly the same thing. Here we use a `mutate_at` function to perform the same alteration upon multiple variables we select. Take a look at the documentation for `mutate_at`, the `list` argument allows you to modify existing columns in place.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <-\n  data |>\n  mutate_at(\n    vars(pop_density, sidewalk_coverage, poi_density),\n    list(scale)\n  )\n```\n:::\n\n\n## Specify the directions\n\nHigh values in indicators may represent beneficial or detrimental conditions - in some cases, higher values are \"good\", and in some cases, lower values are \"good\". When we are creating an additive index, we can transform values so that they are moving in the same direction by simply switching the sign on the values that need to be reversed (e.g. multiply by -1). However, we don't need to adjust directions in our case because our indicators move in the same direction (i.e. high values mean a more walkable environment).\n\n## Aggregate the index\n\nNow we are going to generate our composite index, where standardized values are simply added together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <- score |>\n  rowwise() |>\n  mutate(\n    index = sum(pop_density, sidewalk_coverage, poi_density))|> \n  ungroup()\n```\n:::\n\n\nYou may have noticed `rowwise()`. Typically, if we were to ask `dplyr` to mutate by providing a sum, it would do so by column. `rowwise()` modifies this and asks for something to happen across a data observation (row) instead of by column.\n\nWe could analyze the index value and interpret it as is, but for an index, it's reasonable to anticipate a value falling within the range of 0 to 100. We can use `rescale` to put our values into any specified range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <-\n  score |>\n  mutate(index = rescale(index, to = c(0, 100)))\n```\n:::\n\n\n## Check the result\n\nWe can make a quick map to examine our results. Although, we don't have to over-interpret our results because any method to evaluate walkability is a difficult one. OpenStreetMap also exhibits issues such as missing names, data availability biases, inconsistent categorization, etc. This study chose a more pragmatic method to demonstrate the capabilities of R in data management and spatial analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(score) + \n  geom_sf(aes(fill = index))+\n  scale_fill_continuous()\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n### **Optional:**\n\nIn response to suggestions - here are some other approaches for presenting our results! For example, a formatted and sortable table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rescore the sub-dimensional indices to 0-100 as well\nscore <-\n  score |>\n  mutate_at(vars(pop_density, sidewalk_coverage, poi_density),\n    ~rescale(., to = c(0, 100))) |> \n  st_drop_geometry()\n\nlibrary(gt)\nscore|> \n  modify_if(~is.numeric(.), ~round(., 2)) |> \n  gt() |> \n  tab_style(\n    locations = cells_body(columns = nbh_name),\n    style = cell_text(weight = \"bold\")\n  ) |>\n  opt_interactive(\n    use_compact_mode = TRUE,\n    use_text_wrapping = FALSE\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"purouzpmvn\" class=\".gt_table\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#purouzpmvn table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#purouzpmvn thead, #purouzpmvn tbody, #purouzpmvn tfoot, #purouzpmvn tr, #purouzpmvn td, #purouzpmvn th {\n  border-style: none;\n}\n\n#purouzpmvn p {\n  margin: 0;\n  padding: 0;\n}\n\n#purouzpmvn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#purouzpmvn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#purouzpmvn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#purouzpmvn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#purouzpmvn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#purouzpmvn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#purouzpmvn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#purouzpmvn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#purouzpmvn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#purouzpmvn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#purouzpmvn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#purouzpmvn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#purouzpmvn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#purouzpmvn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#purouzpmvn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#purouzpmvn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#purouzpmvn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#purouzpmvn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#purouzpmvn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#purouzpmvn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#purouzpmvn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#purouzpmvn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#purouzpmvn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#purouzpmvn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#purouzpmvn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#purouzpmvn .gt_left {\n  text-align: left;\n}\n\n#purouzpmvn .gt_center {\n  text-align: center;\n}\n\n#purouzpmvn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#purouzpmvn .gt_font_normal {\n  font-weight: normal;\n}\n\n#purouzpmvn .gt_font_bold {\n  font-weight: bold;\n}\n\n#purouzpmvn .gt_font_italic {\n  font-style: italic;\n}\n\n#purouzpmvn .gt_super {\n  font-size: 65%;\n}\n\n#purouzpmvn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#purouzpmvn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#purouzpmvn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#purouzpmvn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#purouzpmvn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#purouzpmvn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#purouzpmvn .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<div id=\"purouzpmvn\" class=\"reactable html-widget \" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"purouzpmvn\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"nbh_name\":[\"Allston\",\"Back Bay\",\"Beacon Hill\",\"Brighton\",\"Charlestown\",\"Chinatown\",\"Dorchester\",\"Downtown\",\"East Boston\",\"Fenway\",\"Harbor Islands\",\"Hyde Park\",\"Jamaica Plain\",\"Longwood\",\"Mattapan\",\"Mission Hill\",\"North End\",\"Roslindale\",\"Roxbury\",\"South Boston\",\"South Boston Waterfront\",\"South End\",\"West End\",\"West Roxbury\"],\"pop_density\":[[33.14],[61.24],[56.91],[30.36],[17.94],[100],[26.8],[29.97],[11.44],[42.4],[0],[11.4],[17.4],[28.76],[19.63],[57.24],[61.36],[21.07],[27.37],[26.51],[5.63],[63.05],[44.26],[10.42]],\"sidewalk_coverage\":[[51.39],[90.29],[100],[55.03],[46.6],[86.44],[52.39],[66.87],[17.77],[44.15],[0],[31.09],[44.38],[72.83],[44.43],[82.41],[62.58],[49.96],[62.6],[51.97],[21.18],[94.59],[57.07],[35.72]],\"poi_density\":[[100],[48.13],[36.07],[27.87],[10.57],[9.43],[33.34],[45.06],[18.76],[12.49],[\"NA\"],[28.56],[13.96],[16.44],[7.06],[0],[49.86],[27.5],[9.2],[17.76],[24.14],[11.46],[4.37],[14.94]],\"index\":[94.36,100,94.49,42.61,16.52,95.4,42.54,62.23,0,32.66,\"NA\",15.43,17.22,44.47,13.75,57.57,83.92,32.97,31.87,30.81,2.16,77.38,36.15,7.84]},\"columns\":[{\"id\":\"nbh_name\",\"name\":\"nbh_name\",\"type\":\"character\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\nif (colInfo.id === 'nbh_name' & rowIndex === 1) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 2) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 3) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 4) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 5) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 6) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 7) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 8) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 9) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 10) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 11) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 12) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 13) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 14) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 15) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 16) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 17) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 18) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 19) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 20) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 21) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 22) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 23) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 24) {\\n  return { fontWeight: 'bold' }\\n}\\n\\n}\",\"cell\":[\"Allston\",\"Back Bay\",\"Beacon Hill\",\"Brighton\",\"Charlestown\",\"Chinatown\",\"Dorchester\",\"Downtown\",\"East Boston\",\"Fenway\",\"Harbor Islands\",\"Hyde Park\",\"Jamaica Plain\",\"Longwood\",\"Mattapan\",\"Mission Hill\",\"North End\",\"Roslindale\",\"Roxbury\",\"South Boston\",\"South Boston Waterfront\",\"South End\",\"West End\",\"West Roxbury\"],\"html\":true,\"align\":\"left\",\"headerStyle\":{\"font-weight\":\"normal\"}},{\"id\":\"pop_density\",\"name\":\"pop_density\",\"type\":\"numeric\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\nif (colInfo.id === 'nbh_name' & rowIndex === 1) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 2) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 3) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 4) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 5) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 6) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 7) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 8) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 9) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 10) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 11) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 12) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 13) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 14) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 15) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 16) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 17) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 18) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 19) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 20) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 21) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 22) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 23) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 24) {\\n  return { fontWeight: 'bold' }\\n}\\n\\n}\",\"cell\":[\"33.14\",\"61.24\",\"56.91\",\"30.36\",\"17.94\",\"100.00\",\"26.80\",\"29.97\",\"11.44\",\"42.40\",\"0.00\",\"11.40\",\"17.40\",\"28.76\",\"19.63\",\"57.24\",\"61.36\",\"21.07\",\"27.37\",\"26.51\",\"5.63\",\"63.05\",\"44.26\",\"10.42\"],\"html\":true,\"align\":\"center\",\"headerStyle\":{\"font-weight\":\"normal\"}},{\"id\":\"sidewalk_coverage\",\"name\":\"sidewalk_coverage\",\"type\":\"numeric\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\nif (colInfo.id === 'nbh_name' & rowIndex === 1) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 2) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 3) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 4) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 5) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 6) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 7) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 8) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 9) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 10) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 11) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 12) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 13) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 14) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 15) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 16) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 17) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 18) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 19) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 20) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 21) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 22) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 23) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 24) {\\n  return { fontWeight: 'bold' }\\n}\\n\\n}\",\"cell\":[\"51.39\",\"90.29\",\"100.00\",\"55.03\",\"46.60\",\"86.44\",\"52.39\",\"66.87\",\"17.77\",\"44.15\",\"0.00\",\"31.09\",\"44.38\",\"72.83\",\"44.43\",\"82.41\",\"62.58\",\"49.96\",\"62.60\",\"51.97\",\"21.18\",\"94.59\",\"57.07\",\"35.72\"],\"html\":true,\"align\":\"center\",\"headerStyle\":{\"font-weight\":\"normal\"}},{\"id\":\"poi_density\",\"name\":\"poi_density\",\"type\":\"numeric\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\nif (colInfo.id === 'nbh_name' & rowIndex === 1) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 2) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 3) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 4) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 5) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 6) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 7) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 8) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 9) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 10) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 11) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 12) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 13) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 14) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 15) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 16) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 17) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 18) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 19) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 20) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 21) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 22) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 23) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 24) {\\n  return { fontWeight: 'bold' }\\n}\\n\\n}\",\"cell\":[\"100.00\",\"48.13\",\"36.07\",\"27.87\",\"10.57\",\"9.43\",\"33.34\",\"45.06\",\"18.76\",\"12.49\",\"NA\",\"28.56\",\"13.96\",\"16.44\",\"7.06\",\"0.00\",\"49.86\",\"27.50\",\"9.20\",\"17.76\",\"24.14\",\"11.46\",\"4.37\",\"14.94\"],\"html\":true,\"align\":\"center\",\"headerStyle\":{\"font-weight\":\"normal\"}},{\"id\":\"index\",\"name\":\"index\",\"type\":\"numeric\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\nif (colInfo.id === 'nbh_name' & rowIndex === 1) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 2) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 3) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 4) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 5) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 6) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 7) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 8) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 9) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 10) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 11) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 12) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 13) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 14) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 15) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 16) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 17) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 18) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 19) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 20) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 21) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 22) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 23) {\\n  return { fontWeight: 'bold' }\\n}\\n\\nif (colInfo.id === 'nbh_name' & rowIndex === 24) {\\n  return { fontWeight: 'bold' }\\n}\\n\\n}\",\"cell\":[\"94.36\",\"100.00\",\"94.49\",\"42.61\",\"16.52\",\"95.40\",\"42.54\",\"62.23\",\"0.00\",\"32.66\",\"NA\",\"15.43\",\"17.22\",\"44.47\",\"13.75\",\"57.57\",\"83.92\",\"32.97\",\"31.87\",\"30.81\",\"2.16\",\"77.38\",\"36.15\",\"7.84\"],\"html\":true,\"align\":\"right\",\"headerStyle\":{\"font-weight\":\"normal\"}}],\"defaultPageSize\":10,\"showPageSizeOptions\":false,\"pageSizeOptions\":[10,25,50,100],\"paginationType\":\"numbers\",\"showPagination\":true,\"showPageInfo\":true,\"minRows\":1,\"compact\":true,\"nowrap\":true,\"showSortable\":true,\"height\":\"auto\",\"theme\":{\"color\":\"#333333\",\"backgroundColor\":\"#FFFFFF\",\"stripedColor\":\"rgba(128,128,128,0.05)\",\"style\":{\"fontFamily\":\"system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif\"},\"headerStyle\":{\"borderTopStyle\":\"solid\",\"borderTopWidth\":\"2px\",\"borderTopColor\":\"#D3D3D3\",\"borderBottomStyle\":\"solid\",\"borderBottomWidth\":\"2px\",\"borderBottomColor\":\"#D3D3D3\"}},\"elementId\":\"purouzpmvn\",\"dataKey\":\"12267122c7681a4461818716a13bd287\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[\"tag.attribs.columns.0.style\",\"tag.attribs.columns.1.style\",\"tag.attribs.columns.2.style\",\"tag.attribs.columns.3.style\",\"tag.attribs.columns.4.style\"],\"jsHooks\":[]}</script>\n</div>\n```\n:::\n:::\n\n\nOr, we can make some [radar charts](https://r-graph-gallery.com/143-spider-chart-with-saveral-individuals.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnbh = \"Downtown\"\n# The radar chart requires only value columns\ntemp <- score |> \n  filter(nbh_name == nbh)|> \n  select(pop_density, sidewalk_coverage, poi_density)\n\n# I also have to manually add 2 new row: the max and min of each indicator\ntemp <- rbind(rep(100, 3), rep(0, 3), temp) \n\nlibrary(fmsb)\nradarchart(temp, title = nbh)\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n# Exercise\n\nThis exercise will be a self-guided mini research to evaluate the **public transportation service (supply)** of selected Boston neighborhoods. You will define 3-4 indicators that describe existing public transportation services, formulate your analysis strategy, calculate the indicators, then focus on two neighborhoods in Boston to compare your results and evaluate the public transportation supply in your study areas.\n\nYou can describe public transportation service by number of bus and rail stops, number of routes, length of bike routes and sidewalks, etc. You can download the datasets you need from Boston websites or OSM. The primary purpose of this exercise is to practice spatial analysis in R. You should operationalize the metrics in a manageable way and specify indicators that work for you.\n\n# Work Product\n\nPlease document your work process and results in a new Quarto Document, and **upload your .qmd file and rendered HTML file to Canvas** **by the end of day, Tuesday, Dec 5.**\n\nA quick tip: if you include `self_contained = TRUE` in your YAML header, you won't lose the pictures of your html file.\n\n![](/img/lab3-html.PNG)\n",
    "supporting": [
      "lab5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<script src=\"../site_libs/jquery-1.12.4/jquery.min.js\"></script>\r\n<link href=\"../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/leaflet-1.3.1/leaflet.js\"></script>\r\n<link href=\"../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/proj4-2.6.2/proj4.min.js\"></script>\r\n<script src=\"../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\r\n<link href=\"../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\r\n<script src=\"../site_libs/core-js-2.5.3/shim.min.js\"></script>\r\n<script src=\"../site_libs/react-17.0.0/react.min.js\"></script>\r\n<script src=\"../site_libs/react-17.0.0/react-dom.min.js\"></script>\r\n<script src=\"../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\r\n<link href=\"../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}